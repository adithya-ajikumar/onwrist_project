<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background-color: #fff;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            position: relative;
            overflow: hidden;
        }

        .container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, #5e72e4, #825ee4);
        }

        .logo-area {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo-icon {
            background: linear-gradient(to right, #5e72e4, #825ee4);
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            color: white;
            font-size: 24px;
        }

        h2 {
            color: #344767;
            font-size: 24px;
            margin-bottom: 10px;
            font-weight: 600;
            text-align: center;
        }

        .subtitle {
            color: #67748e;
            font-size: 14px;
            margin-bottom: 30px;
            text-align: center;
        }

        .form-group {
            margin-bottom: 25px;
            position: relative;
        }

        label {
            display: block;
            color: #344767;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .input-with-icon {
            position: relative;
        }

        .input-with-icon i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #adb5bd;
        }

        input {
            width: 100%;
            padding: 14px 15px 14px 45px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s;
            background-color: #f8f9fa;
        }

        input:focus {
            outline: none;
            border-color: #5e72e4;
            box-shadow: 0 0 0 3px rgba(94, 114, 228, 0.1);
            background-color: #fff;
        }

        button {
            width: 100%;
            padding: 14px;
            background: linear-gradient(to right, #5e72e4, #825ee4);
            border: none;
            border-radius: 8px;
            color: #fff;
            font-size: 15px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 4px 12px rgba(94, 114, 228, 0.25);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(94, 114, 228, 0.35);
        }

        button:disabled {
            background: linear-gradient(to right, #a8b1df, #b8b1df);
            transform: none;
            box-shadow: none;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .back-link {
            text-align: center;
            margin-top: 25px;
        }

        .back-link a {
            color: #5e72e4;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
        }

        .back-link a:hover {
            text-decoration: underline;
        }

        .back-link a.disabled {
            color: #adb5bd;
            pointer-events: none;
            text-decoration: none;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(5px);
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 35px;
            border-radius: 16px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 400px;
            animation: slideIn 0.4s ease;
            position: relative;
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            color: #67748e;
            font-size: 22px;
            font-weight: bold;
            transition: all 0.2s;
        }

        .close:hover,
        .close:focus {
            color: #344767;
            text-decoration: none;
            cursor: pointer;
        }

        .otp-inputs {
            display: flex;
            justify-content: space-between;
            margin: 25px 0;
            gap: 8px;
        }

        .otp-input {
            width: 45px;
            height: 55px;
            text-align: center;
            font-size: 20px;
            border-radius: 8px;
            border: 1px solid #e9ecef;
            background-color: #f8f9fa;
            -moz-appearance: textfield; /* Firefox */
            padding: 0;
        }

        .otp-input::-webkit-outer-spin-button,
        .otp-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .otp-input:focus {
            outline: none;
            border-color: #5e72e4;
            box-shadow: 0 0 0 3px rgba(94, 114, 228, 0.1);
            background-color: #fff;
        }

        .password-toggle {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #adb5bd;
            cursor: pointer;
        }

        .strength-meter {
            height: 4px;
            background-color: #f1f1f1;
            margin-top: 8px;
            border-radius: 2px;
            position: relative;
        }

        .strength-meter-fill {
            height: 100%;
            border-radius: 2px;
            transition: width 0.3s, background-color 0.3s;
            width: 0%;
        }

        .strength-text {
            font-size: 12px;
            margin-top: 5px;
            float: right;
        }

        .timer {
            font-size: 14px;
            color: #67748e;
            text-align: center;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo-area">
            <div class="logo-icon">
                <i class="fas fa-lock"></i>
            </div>
            <h2>Forgot Password</h2>
            <p class="subtitle">Enter your email and we'll send you a verification code</p>
        </div>
        
        <form id="forgot-password-form">
            <div class="form-group">
                <label for="email">Email Address</label>
                <div class="input-with-icon">
                    <i class="fas fa-envelope"></i>
                    <input type="email" id="email" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            
            <button type="submit">Send Reset Code</button>
        </form>
        
        <div class="back-link">
            <a href="/login"><i class="fas fa-arrow-left"></i> Back to Login</a>
        </div>
    </div>

    <!-- OTP Verification Modal -->
    <div id="otp-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Enter Verification Code</h2>
            <p class="subtitle">We've sent a 6-digit code to your email</p>
            
            <form id="otp-form">
                <input type="hidden" id="full-otp">
                <div class="otp-inputs">
                    <input type="number" class="otp-input" min="0" max="9" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
                    <input type="number" class="otp-input" min="0" max="9" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
                    <input type="number" class="otp-input" min="0" max="9" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
                    <input type="number" class="otp-input" min="0" max="9" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
                    <input type="number" class="otp-input" min="0" max="9" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
                    <input type="number" class="otp-input" min="0" max="9" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
                </div>
                
                <button type="submit">Verify Code</button>
            </form>
            
            <div class="timer" id="otp-timer"></div>
            
            <div class="back-link">
                <a href="#" id="resend-otp" class="disabled">Didn't receive a code? Resend</a>
            </div>
        </div>
    </div>

    <!-- Reset Password Modal -->
    <div id="reset-password-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Create New Password</h2>
            <p class="subtitle">Your new password must be different from your previous password</p>
            
            <form id="reset-password-form">
                <div class="form-group">
                    <label for="new-password">New Password</label>
                    <div class="input-with-icon">
                        <i class="fas fa-lock"></i>
                        <input type="password" id="password" name="password" required>
                        <span class="password-toggle" id="toggle-new-pwd">
                            <i class="fas fa-eye"></i>
                        </span>
                    </div>
                    <div class="strength-meter">
                        <div class="strength-meter-fill" id="strength-meter-fill"></div>
                    </div>
                    <div class="strength-text" id="strength-text"></div>
                </div>
                
                <div class="form-group">
                    <label for="confirm-password">Confirm Password</label>
                    <div class="input-with-icon">
                        <i class="fas fa-lock"></i>
                        <input type="password" id="confirm-password" name="confirm-password" required>
                        <span class="password-toggle" id="toggle-confirm-pwd">
                            <i class="fas fa-eye"></i>
                        </span>
                    </div>
                </div>
                
                <button type="submit">Reset Password</button>
            </form>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const forgotPasswordForm = document.getElementById('forgot-password-form');
        const otpForm = document.getElementById('otp-form');
        const otpModal = document.getElementById('otp-modal');
        const resetPasswordModal = document.getElementById('reset-password-modal');
        const closeButtons = document.querySelectorAll('.close');
        const resendOtpLink = document.getElementById('resend-otp');
        const otpTimerElement = document.getElementById('otp-timer');
        const otpInputs = document.querySelectorAll('.otp-input');
        const fullOtp = document.getElementById('full-otp');
        const toggleNewPwd = document.getElementById('toggle-new-pwd');
        const toggleConfirmPwd = document.getElementById('toggle-confirm-pwd');
        const strengthMeterFill = document.getElementById('strength-meter-fill');
        const strengthText = document.getElementById('strength-text');
        const newPasswordInput = document.getElementById('password');
        
        let resendTimer;
        let timerSeconds = 30;

        // Start resend timer
        function startResendTimer() {
            // Clear any existing timer
            if (resendTimer) {
                clearInterval(resendTimer);
            }
            
            // Disable resend link
            resendOtpLink.classList.add('disabled');
            
            // Set initial timer value
            timerSeconds = 30;
            updateTimerDisplay();
            
            // Start countdown
            resendTimer = setInterval(() => {
                timerSeconds--;
                updateTimerDisplay();
                
                if (timerSeconds <= 0) {
                    clearInterval(resendTimer);
                    resendOtpLink.classList.remove('disabled');
                    otpTimerElement.textContent = 'You can now resend the code';
                }
            }, 1000);
        }
        
        // Update timer display
        function updateTimerDisplay() {
            otpTimerElement.textContent = `Resend code in ${timerSeconds} seconds`;
        }

        // Handle forgot password form submission
        forgotPasswordForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const email = document.getElementById('email').value;

            if (!email) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please enter a valid email address.',
                    confirmButtonColor: '#5e72e4',
                });
                return;
            }

            try {
                // Show loading state
                Swal.fire({
                    title: 'Sending verification code',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Call the backend route to send OTP
                const response = await fetch('/forgot-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email }),
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message,
                        confirmButtonColor: '#5e72e4',
                    });
                    otpModal.style.display = 'block'; // Open OTP modal
                    // Focus on first OTP input
                    otpInputs[0].focus();
                    
                    // Start timer for resend button
                    startResendTimer();
                    
                    // Reset OTP inputs
                    otpInputs.forEach(input => {
                        input.value = '';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to send verification code. Please try again.',
                        confirmButtonColor: '#5e72e4',
                    });
                }
            } catch (error) {
                console.error('Error sending OTP:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again later.',
                    confirmButtonColor: '#5e72e4',
                });
            }
        });

        // OTP input handling
        otpInputs.forEach((input, index) => {
            // Allow only 1 digit per input
            input.addEventListener('input', (e) => {
                // Ensure only one digit is entered
                if (input.value.length > 1) {
                    input.value = input.value.slice(0, 1);
                }
                
                // Auto-focus next input
                if (input.value.length === 1 && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
                
                // Combine all inputs for submission
                updateFullOtp();
            });
            
            // Handle backspace
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace') {
                    if (input.value === '' && index > 0) {
                        // If current field is empty and backspace is pressed, focus on previous field
                        otpInputs[index - 1].focus();
                    } else {
                        // Clear current field on backspace
                        setTimeout(() => {
                            updateFullOtp();
                        }, 10);
                    }
                }
            });
            
            // Handle paste event globally
            input.addEventListener('paste', (e) => {
                e.preventDefault();
                const pasteData = e.clipboardData.getData('text').trim();
                
                // Check if pasted data is a 6-digit number
                if (/^\d{6}$/.test(pasteData)) {
                    // Distribute pasted digits to inputs
                    otpInputs.forEach((inp, i) => {
                        inp.value = pasteData.charAt(i);
                    });
                    updateFullOtp();
                    otpInputs[5].focus();
                }
            });
        });
        
        // Update the full OTP value
        function updateFullOtp() {
            let otp = '';
            otpInputs.forEach(input => {
                otp += input.value;
            });
            fullOtp.value = otp;
        }

        // Handle OTP form submission
        otpForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            let otp = '';
            otpInputs.forEach(input => {
                otp += input.value;
            });

            if (otp.length !== 6) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please enter the complete 6-digit verification code.',
                    confirmButtonColor: '#5e72e4',
                });
                return;
            }

            try {
                // Show loading state
                Swal.fire({
                    title: 'Verifying code',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                // Call the backend route to verify OTP
                const response = await fetch('/otp-verify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ otp }),
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message,
                        confirmButtonColor: '#5e72e4',
                    }).then(() => {
                        otpModal.style.display = 'none';
                        resetPasswordModal.style.display = 'block';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Invalid verification code. Please try again.',
                        confirmButtonColor: '#5e72e4',
                    });
                    
                    // Reset OTP inputs
                    otpInputs.forEach(input => {
                        input.value = '';
                    });
                    otpInputs[0].focus();
                    
                    // Restart timer on wrong OTP
                    startResendTimer();
                }
            } catch (error) {
                console.error('Error verifying OTP:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again later.',
                    confirmButtonColor: '#5e72e4',
                });
            }
        });

        // Handle Reset Password form
        const resetPasswordForm = document.getElementById('reset-password-form');
        resetPasswordForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirm-password').value;
            
            if (password !== confirmPassword) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Passwords do not match.',
                    confirmButtonColor: '#5e72e4',
                });
                return;
            }
            
            try {
                // Show loading state
                Swal.fire({
                    title: 'Resetting password',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                // Call backend route
                const response = await fetch('/update-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                       password,
                       confirmPassword 
                       
                    }),
                });
                
                const data = await response.json();
                
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Your password has been reset successfully!',
                        confirmButtonColor: '#5e72e4',
                    }).then(() => {
                        window.location.href = '/login';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to reset password. Please try again.',
                        confirmButtonColor: '#5e72e4',
                    });
                }
            } catch (error) {
                console.error('Error resetting password:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again later.',
                    confirmButtonColor: '#5e72e4',
                });
            }
        });

        // Password toggle functionality
        toggleNewPwd.addEventListener('click', () => {
            const pwdField = document.getElementById('new-password');
            const pwdIcon = toggleNewPwd.querySelector('i');
            
            if (pwdField.type === 'password') {
                pwdField.type = 'text';
                pwdIcon.classList.remove('fa-eye');
                pwdIcon.classList.add('fa-eye-slash');
            } else {
                pwdField.type = 'password';
                pwdIcon.classList.remove('fa-eye-slash');
                pwdIcon.classList.add('fa-eye');
            }
        });
        
        toggleConfirmPwd.addEventListener('click', () => {
            const pwdField = document.getElementById('confirm-password');
            const pwdIcon = toggleConfirmPwd.querySelector('i');
            
            if (pwdField.type === 'password') {
                pwdField.type = 'text';
                pwdIcon.classList.remove('fa-eye');
                pwdIcon.classList.add('fa-eye-slash');
            } else {
                pwdField.type = 'password';
                pwdIcon.classList.remove('fa-eye-slash');
                pwdIcon.classList.add('fa-eye');
            }
        });

        // Password strength meter
        newPasswordInput.addEventListener('input', () => {
            const password = newPasswordInput.value;
            let strength = 0;
            
            if (password.length >= 8) strength += 1;
            if (/[A-Z]/.test(password)) strength += 1;
            if (/[a-z]/.test(password)) strength += 1;
            if (/[0-9]/.test(password)) strength += 1;
            if (/[^A-Za-z0-9]/.test(password)) strength += 1;
            
            // Update UI based on strength
            if (password.length === 0) {
                strengthMeterFill.style.width = '0%';
                strengthMeterFill.style.backgroundColor = '#f1f1f1';
                strengthText.textContent = '';
            } else if (strength <= 2) {
                strengthMeterFill.style.width = '33%';
                strengthMeterFill.style.backgroundColor = '#f5365c';
                strengthText.textContent = 'Weak';
                strengthText.style.color = '#f5365c';
            } else if (strength <= 4) {
                strengthMeterFill.style.width = '66%';
                strengthMeterFill.style.backgroundColor = '#fb6340';
                strengthText.textContent = 'Medium';
                strengthText.style.color = '#fb6340';
            } else {
                strengthMeterFill.style.width = '100%';
                strengthMeterFill.style.backgroundColor = '#2dce89';
                strengthText.textContent = 'Strong';
                strengthText.style.color = '#2dce89';
            }
        });

        // Handle "Resend OTP" link
        resendOtpLink.addEventListener('click', async (e) => {
            e.preventDefault();
            
            // Ignore if the link is disabled
            if (resendOtpLink.classList.contains('disabled')) {
                return;
            }
            
            const email = document.getElementById('email').value;
            
            if (!email) {
                otpModal.style.display = 'none';
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please enter your email first.',
                    confirmButtonColor: '#5e72e4',
                });
                return;
            }
            
            try {
                Swal.fire({
                    title: 'Resending verification code',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                const response = await fetch('/resendOtp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                   
                    body: JSON.stringify({ email }),
                });
                
                const data = await response.json();
                
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message,
                        confirmButtonColor: '#5e72e4',
                    });
                    
                    // Clear OTP inputs
                    otpInputs.forEach(input => {
                        input.value = '';
                    });
                    otpInputs[0].focus();
                    
                    // Start new timer
                    startResendTimer();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to resend verification code.',
                        confirmButtonColor: '#5e72e4',
                    });
                }
            } catch (error) {
                console.error('Error resending OTP:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again later.',
                    confirmButtonColor: '#5e72e4',
                });
            }
        });

        // Close modal functionality
        closeButtons.forEach((button) => {
            button.addEventListener('click', () => {
                otpModal.style.display = 'none';
                resetPasswordModal.style.display = 'none';
                
                // Clear timer when modal is closed
                if (resendTimer) {
                    clearInterval(resendTimer);
                }
            });
        });

        window.addEventListener('click', (event) => {
            if (event.target === otpModal) {
                otpModal.style.display = 'none';
                
                // Clear timer when modal is closed
                if (resendTimer) {
                    clearInterval(resendTimer);
                }
            }
            if (event.target === resetPasswordModal) {
                resetPasswordModal.style.display = 'none';
            }
        });
    });
    </script>
</body>
</html>