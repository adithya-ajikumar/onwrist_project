<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<style>
    /* Custom CSS for error messages and form styling */
    .error-message {
        color: #dc3545; /* Red color for error messages */
        font-size: 0.875em; /* Slightly smaller font size */
        margin-top: 0.25rem; /* Space above the error message */
        display: block; /* Ensure it takes up its own line */
    }

    .form-control {
        border: 1px solid #ced4da; /* Default border color */
        padding: 0.5rem;
        border-radius: 4px;
        width: 100%;
        margin-bottom: 1rem;
    }

    .form-control:invalid {
        border-color: #dc3545; /* Red border for invalid inputs */
    }

    .form-control:focus:invalid {
        border-color: #dc3545; /* Red border for focused invalid inputs */
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); /* Red glow for focused invalid inputs */
    }

    .form-label {
        font-weight: bold; /* Make labels bold */
        margin-bottom: 0.5rem; /* Space below the label */
    }

    .form-select {
        border: 1px solid #ced4da; /* Default border color */
        padding: 0.5rem;
        border-radius: 4px;
        width: 100%;
        margin-bottom: 1rem;
    }

    .form-select:invalid {
        border-color: #dc3545; /* Red border for invalid selects */
    }

    .form-select:focus:invalid {
        border-color: #dc3545; /* Red border for focused invalid selects */
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); /* Red glow for focused invalid selects */
    }

    .btn {
        margin-top: 1rem; /* Space above the button */
        padding: 0.5rem 1rem;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #0056b3;
    }

    .preview-container {
        margin-top: 1rem; /* Space above the preview container */
    }

    .cropped-preview {
        max-width: 150px;
        max-height: 150px;
        display: block;
        margin-top: 10px;
        border: 1px solid #eee;
    }

    .remove-btn {
        margin-top: 0.5rem; /* Space above the remove button */
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        cursor: pointer;
    }

    .remove-btn:hover {
        background-color: #c82333;
    }

    .image-upload-container {
        margin-bottom: 1rem;
    }

    .image-cropper {
        margin-top: 1rem;
        display: none;
    }

    .cropper-container {
        max-width: 100%;
    }

    .thumbnail {
        margin-right: 10px;
        margin-bottom: 10px;
    }

    .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
    }
</style>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form id="productForm" method="post" action="/admin/addProducts" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                            <span id="productName-error" class="error-message"></span>
                        </div>
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select" name="brand" required>
                                <option value="">Select Brand</option>
                                <option value="Nike">Nike</option>
                                <option value="Adidas">Adidas</option>
                                <option value="Puma">Puma</option>
                            </select>
                            <span id="brand-error" class="error-message"></span>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                            <span id="description-error" class="error-message"></span>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="price" type="text" class="form-control">
                                    <span id="price-error" class="error-message"></span>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Offer price</label>
                                    <input placeholder="$" name="offerprice" type="text" class="form-control">
                                    <span id="offerprice-error" class="error-message"></span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Gold Stock</label>
                                    <input placeholder="0" name="colorStock[gold]" type="number" class="form-control" value="0">
                                    <span id="goldStock-error" class="error-message"></span>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Silver Stock</label>
                                    <input placeholder="0" name="colorStock[silver]" type="number" class="form-control" value="0">
                                    <span id="silverStock-error" class="error-message"></span>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Black Stock</label>
                                    <input placeholder="0" name="colorStock[black]" type="number" class="form-control" value="0">
                                    <span id="blackStock-error" class="error-message"></span>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" style="width: 150px;" name="categoryId" required>
                                            <option value="">Select Category</option>
                                            <% for(let i=0; i<cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>">
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <span id="category-error" class="error-message"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose product image</h4>
                            </div>
                            <div class="card-body">
                                <div class="form-section">
                                    <h3>Select Images:</h3>
                                    <div id="imageUploadContainer" class="image-upload-container">
                                        <div class="image-input-row" id="imageInput1">
                                            <input type="file" class="form-control" name="productImages" id="input1" onchange="handleImageUpload(event, 1)" />
                                            <div class="image-cropper" id="cropper1">
                                                <img id="croppedImg1" alt="" style="max-width: 100%; height: auto;" />
                                                <button type="button" id="saveButton1" class="btn" onclick="saveImage(1)">
                                                    Save
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="croppedImagesPreview" class="preview-container">
                                    <h4>Preview Cropped Images:</h4>
                                    <div id="previewList" class="thumbnails-container"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Return Policy</label>
                                    <select class="form-select" name="returnpolicy">
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </select>
                                    <span id="returnpolicy-error" class="error-message"></span>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Warranty</label>
                                    <select class="form-select" name="warranty">
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </select>
                                    <span id="warranty-error" class="error-message"></span>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Status</label>
                                    <select class="form-select" name="status">
                                        <option value="instock">In Stock</option>
                                        <option value="outofstock">Out of Stock</option>
                                        <option value="available">Available</option>
                                    </select>
                                    <span id="status-error" class="error-message"></span>
                                </div>
                            </div>
                        </div>
                        <div>
                            <input class="btn" type="submit" value="Publish">
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    const cropperInstances = {};
    let uploadedImageCount = 0;

    function handleImageUpload(event, index) {
        const fileInput = event.target;
        const file = fileInput.files[0];
        if (!file) return;

        const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
        if (!validTypes.includes(file.type)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Format',
                text: 'Only images are allowed'
            });
            fileInput.value = '';
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            const image = document.getElementById(`croppedImg${index}`);
            if (!image) return;

            image.src = e.target.result;

            // Wait for image to load before initializing Cropper
            image.onload = function() {
                const cropperContainer = document.getElementById(`cropper${index}`);
                if (!cropperContainer) return;

                cropperContainer.style.display = "block";

                // Destroy existing cropper instance if it exists
                if (cropperInstances[index]) {
                    cropperInstances[index].destroy();
                }

                // Initialize new Cropper instance
                cropperInstances[index] = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 0.8,
                    responsive: true,
                    checkCrossOrigin: false
                });
            };
        };
        reader.readAsDataURL(file);
    }

    function saveImage(index) {
        const cropper = cropperInstances[index];
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });

        const imageInput = document.getElementById(`input${index}`);

        canvas.toBlob((blob) => {
            const fileName = `cropped-image-${Date.now()}.jpg`;
            const newFile = new File([blob], fileName, { type: "image/jpeg" });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(newFile);
            imageInput.files = dataTransfer.files;

            const previewList = document.getElementById("previewList");
            const thumbnail = document.createElement("div");
            thumbnail.className = "thumbnail";

            const img = document.createElement("img");
            img.src = canvas.toDataURL("image/jpeg");
            img.className = "cropped-preview";
            thumbnail.appendChild(img);

            const removeButton = document.createElement("button");
            removeButton.className = "remove-btn";
            removeButton.innerHTML = "Remove";
            removeButton.onclick = () => removeCroppedImage(thumbnail, imageInput, index);
            thumbnail.appendChild(removeButton);

            previewList.appendChild(thumbnail);

            const cropperContainer = document.getElementById(`cropper${index}`);
            cropperContainer.style.display = "none";
            cropper.destroy();
            delete cropperInstances[index];

            uploadedImageCount++;
            addNewImage(); // Add a new file input field after saving an image
        }, 'image/jpeg', 0.9);
    }

    function removeCroppedImage(thumbnail, imageInput, index) {
        const previewList = document.getElementById("previewList");
        previewList.removeChild(thumbnail);
        imageInput.value = '';

        const cropperContainer = document.getElementById(`cropper${index}`);
        cropperContainer.style.display = "none";

        if (cropperInstances[index]) {
            cropperInstances[index].destroy();
            delete cropperInstances[index];
        }

        uploadedImageCount--;

        // Remove the corresponding file input field
        const imageInputRow = document.getElementById(`imageInput${index}`);
        if (imageInputRow) {
            imageInputRow.remove();
        }
    }

    function addNewImage() {
        const fileInputCount = document.querySelectorAll('.image-input-row').length + 1;

        const newInput = document.createElement('div');
        newInput.className = 'image-input-row';
        newInput.id = `imageInput${fileInputCount}`;

        newInput.innerHTML = `
            <input
                type="file"
                class="form-control"
                name="productImages"
                id="input${fileInputCount}"
                onchange="handleImageUpload(event, ${fileInputCount})"
                accept="image/png, image/jpeg, image/jpg"
            />
            <div class="image-cropper" id="cropper${fileInputCount}" style="display: none;">
                <img id="croppedImg${fileInputCount}" alt="" style="max-width: 100%; height: auto;" />
                <button type="button" id="saveButton${fileInputCount}" class="btn" onclick="saveImage(${fileInputCount})">
                    Save Cropped Image
                </button>
            </div>
        `;

        document.getElementById('imageUploadContainer').appendChild(newInput);
    }

    document.addEventListener('DOMContentLoaded', () => {
        addNewImage();
    });

    document.getElementById('productForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        // Clear previous errors
        clearErrorMessages();

        // Validate form
        if (!validateForm()) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please check all required fields'
            });
            return;
        }

        try {
            // Show loading state
            Swal.fire({
                title: 'Adding Product',
                text: 'Please wait...',
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const formData = new FormData(this);
            const response = await fetch('/admin/addProduct', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message || 'Product added successfully'
                });
                window.location.href = '/admin/products';
            } else {
                throw new Error(result.message || 'Failed to add product');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: error.message || 'Failed to add product'
            });
        }
    });

    // Add these helper functions
    function clearErrorMessages() {
        const errorElements = document.querySelectorAll('.error-message, .text-danger');
        errorElements.forEach(el => {
            if (el) el.textContent = '';
        });
    }

    function validateForm() {
        let hasErrors = false;
        const fields = {
            'product_name': 'Product Name',
            'brand': 'Brand',
            'descriptionid': 'Description',
            'price': 'Regular Price',
            'categoryId': 'Category'
        };

        // Validate required fields
        for (const [id, label] of Object.entries(fields)) {
            const element = document.getElementById(id) || document.querySelector(`[name="${id}"]`);
            const errorElement = document.getElementById(`${id.replace('_', '')}-error`);

            if (element && errorElement) {
                if (!element.value.trim()) {
                    errorElement.textContent = `${label} is required.`;
                    hasErrors = true;
                }
            }
        }

        // Validate colorStock
        const colorStockFields = [
            { id: 'colorStock[gold]', label: 'Gold Stock' },
            { id: 'colorStock[silver]', label: 'Silver Stock' },
            { id: 'colorStock[black]', label: 'Black Stock' }
        ];

        colorStockFields.forEach(field => {
            const element = document.querySelector(`[name="${field.id}"]`);
            const errorElement = document.getElementById(`${field.id.replace('[', '').replace(']', '').replace('stock', '')}-error`);

            if (element && errorElement) {
                if (isNaN(element.value) || parseInt(element.value) < 0) {
                    errorElement.textContent = `${field.label} must be a non-negative number.`;
                    hasErrors = true;
                }
            }
        });

        return !hasErrors;
    }
</script>

<%- include("../../views/partials/admin/footer") %>
